{
  "name": "crater-ext",
  "displayName": "Crater - Game Asset Generator",
  "description": "AI-powered chatbot for generating game assets",
  "version": "0.0.1",
  "engines": {
    "vscode": "^1.103.0"
  },
  "categories": [
    "Other",
    "Machine Learning",
    "Snippets"
  ],
  "activationEvents": [],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "crater-ext.openChatbot",
        "title": "Open Game Asset Chatbot",
        "category": "Crater"
      },
      {
        "command": "crater-ext.showChatbot",
        "title": "Show Game Asset Chatbot (Debug)",
        "category": "Crater"
      },
      {
        "command": "crater-ext.testViewRegistration",
        "title": "Test View Registration",
        "category": "Crater"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "crater-ext-container",
          "title": "Crater Game Assets",
          "icon": "$(game)"
        }
      ]
    },
    "views": {
      "crater-ext-container": [
        {
          "id": "crater-ext.chatbotView",
          "name": "Game Asset Assistant",
          "when": "true",
          "type": "webview"
        }
      ],
      "explorer": [
        {
          "id": "crater-ext.chatbotViewDebug",
          "name": "Game Asset Assistant (Debug)",
          "when": "true",
          "type": "webview"
        }
      ]
    },
    "menus": {
      "commandPalette": [
        {
          "command": "crater-ext.openChatbot"
        },
        {
          "command": "crater-ext.showChatbot"
        },
        {
          "command": "crater-ext.testViewRegistration"
        }
      ]
    },
    "configuration": {
      "title": "Crater Game Asset Assistant",
      "properties": {
        "crater-ext.aiProvider": {
          "type": "string",
          "default": "gemini",
          "enum": [
            "gemini",
            "openai"
          ],
          "enumDescriptions": [
            "Google Gemini AI provider (requires API key)",
            "OpenAI GPT-4 Vision provider (requires API key)"
          ],
          "description": "AI provider to use for generating responses"
        },
        "crater-ext.geminiApiKey": {
          "type": "string",
          "default": "",
          "description": "Google Gemini API key (required when using Gemini provider)"
        },
        "crater-ext.openaiApiKey": {
          "type": "string",
          "default": "",
          "description": "OpenAI API key (required when using OpenAI provider)"
        },
        "crater-ext.aiModel": {
          "type": "string",
          "default": "gemini-2.5-flash-image-preview",
          "enum": [
            "gemini-2.5-flash-image-preview",
            "imagen-4.0-generate-001",
            "gemini-2.0-flash-exp",
            "gemini-1.5-flash",
            "gemini-1.5-pro",
            "gpt-image-1"
          ],
          "enumDescriptions": [
            "Gemini 2.5 Flash (Image Preview) - Conversational image generation and editing",
            "Imagen 4.0 - High-quality direct image generation",
            "Gemini 2.0 Flash (Experimental) - Text generation only",
            "Gemini 1.5 Flash - Text generation only",
            "Gemini 1.5 Pro - Text generation only",
            "OpenAI GPT-Image-1 - Latest OpenAI image generation"
          ],
          "description": "AI model to use for generating images and responses"
        },
        "crater-ext.imageSaveDirectory": {
          "type": "string",
          "default": "${workspaceFolder}/images",
          "description": "Directory where generated images will be saved. Supports VS Code variables like ${workspaceFolder}"
        },
        "crater-ext.autoSaveImages": {
          "type": "boolean",
          "default": true,
          "description": "Automatically save generated images to the configured directory"
        },
        "crater-ext.imageSize": {
          "type": "string",
          "default": "auto",
          "enum": [
            "auto",
            "1024x1024",
            "1024x1536",
            "1536x1024"
          ],
          "enumDescriptions": [
            "Auto - AI selects optimal size based on prompt",
            "Square 1024x1024 - Standard square format",
            "Portrait 1024x1536 - Tall format for portraits",
            "Landscape 1536x1024 - Wide format for landscapes"
          ],
          "description": "Image size for generated images (applies to OpenAI gpt-image-1 provider)"
        },
        "crater-ext.imageQuality": {
          "type": "string",
          "default": "auto",
          "enum": [
            "auto",
            "low",
            "medium",
            "high"
          ],
          "enumDescriptions": [
            "Auto - AI selects optimal quality for the prompt",
            "Low - Fast generation, lower cost, basic quality",
            "Medium - Balanced quality and speed",
            "High - Best quality, slower generation, higher cost"
          ],
          "description": "Image quality for generated images (applies to OpenAI gpt-image-1 provider)"
        }
      }
    }
  },
  "scripts": {
    "build": "pnpm run lint && pnpm run build:ext && pnpm run build:webview",
    "build:ext": "node esbuild.js --production",
    "build:webview": "vite build",
    "dev": "npm-run-all -p dev:*",
    "dev:ext": "node esbuild.js --watch",
    "dev:webview": "vite build --watch",
    "vscode:prepublish": "pnpm run build",
    "compile": "pnpm run type-check && pnpm run lint && pnpm run build:ext && pnpm run build:webview",
    "watch": "npm-run-all -p watch:*",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
    "package": "pnpm run build && vsce package",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "pnpm run compile-tests && pnpm run compile && pnpm run lint",
    "type-check": "tsc --noEmit",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix",
    "format": "prettier --write .",
    "test": "vscode-test",
    "clean": "rm -rf dist out"
  },
  "dependencies": {
    "@crater/core": "workspace:*"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.10",
    "@types/node": "22.x",
    "@types/vscode": "^1.103.0",
    "@types/vscode-webview": "^1.57.5",
    "@typescript-eslint/eslint-plugin": "^8.39.0",
    "@typescript-eslint/parser": "^8.39.0",
    "@vscode/test-cli": "^0.0.11",
    "@vscode/test-electron": "^2.5.2",
    "@vscode/vsce": "^3.6.0",
    "esbuild": "^0.25.8",
    "eslint": "^9.32.0",
    "npm-run-all": "^4.1.5",
    "typescript": "^5.9.2",
    "vite": "^7.0.4"
  }
}
