import {
    BaseImageModelProvider,
    AIProviderConfig,
    AIGenerationRequest,
    AIGenerationResponse,
    AIProviderError,
} from '../types'

// OpenAI API types
interface OpenAIMessage {
    role: 'system' | 'user' | 'assistant'
    content: Array<{
        type: 'text' | 'image_url'
        text?: string
        image_url?: {
            url: string
            detail?: 'low' | 'high' | 'auto'
        }
    }>
}

interface OpenAIRequest {
    model: string
    messages: OpenAIMessage[]
    max_tokens: number
    temperature: number
    stream?: boolean
}

interface OpenAIChoice {
    message: {
        content: string
        role: string
    }
    finish_reason: string
    index: number
}

interface OpenAIResponse {
    choices: OpenAIChoice[]
    usage: {
        prompt_tokens: number
        completion_tokens: number
        total_tokens: number
    }
    model: string
    id: string
}

/**
 * OpenAI GPT Provider with Image Support
 * Supports GPT-4 Vision and other image-capable models
 */
export class OpenAIImageProvider extends BaseImageModelProvider {
    private static readonly DEFAULT_MODEL = 'gpt-4-vision-preview'
    private static readonly API_ENDPOINT = 'https://api.openai.com/v1'

    constructor(config: AIProviderConfig = {}) {
        super('openai', OpenAIImageProvider.DEFAULT_MODEL, config)
    }

    /**
     * Generate a response using OpenAI API
     */
    async generateResponse(
        request: AIGenerationRequest
    ): Promise<AIGenerationResponse> {
        if (!this.isConfigured()) {
            throw new Error(
                'OpenAI provider is not configured. Please provide an API key.'
            )
        }

        const endpoint =
            this.config.endpoint || OpenAIImageProvider.API_ENDPOINT

        try {
            const response = await this.callOpenAIAPI(endpoint, request)
            return this.parseOpenAIResponse(response)
        } catch (error) {
            throw this.handleOpenAIError(error)
        }
    }

    /**
     * Check if the provider has the required configuration
     */
    isConfigured(): boolean {
        return !!this.config.apiKey
    }

    private async callOpenAIAPI(
        endpoint: string,
        request: AIGenerationRequest
    ): Promise<OpenAIResponse> {
        const url = `${endpoint}/chat/completions`

        const messages: OpenAIMessage[] = []

        // Add system message if provided
        if (request.systemPrompt) {
            messages.push({
                role: 'system',
                content: [{ type: 'text', text: request.systemPrompt }],
            })
        }

        // Build user message content
        const userContent: OpenAIMessage['content'] = [
            { type: 'text', text: request.prompt },
        ]

        // Add images if provided
        if (request.images && request.images.length > 0) {
            for (const image of request.images) {
                userContent.push({
                    type: 'image_url',
                    image_url: {
                        url: this.formatImageUrl(image),
                        detail: 'high',
                    },
                })
            }
        }

        messages.push({
            role: 'user',
            content: userContent,
        })

        const body: OpenAIRequest = {
            model: this.getModel(),
            messages,
            max_tokens: request.maxTokens ?? 1000,
            temperature: request.temperature ?? 0.7,
            stream: false,
        }

        const response = await fetch(url, {
            method: 'POST',
            headers: {
                Authorization: `Bearer ${this.config.apiKey}`,
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(body),
        })

        if (!response.ok) {
            const errorData = await response
                .json()
                .catch(() => ({ error: { message: 'Unknown error' } }))
            throw new Error(
                `OpenAI API error: ${response.status} - ${errorData.error?.message || 'Unknown error'}`
            )
        }

        return response.json() as Promise<OpenAIResponse>
    }

    private formatImageUrl(imageData: string): string {
        // If it's already a data URL or HTTP URL, return as-is
        if (imageData.startsWith('data:') || imageData.startsWith('http')) {
            return imageData
        }

        // Assume it's base64 and create a data URL
        return `data:image/jpeg;base64,${imageData}`
    }

    private parseOpenAIResponse(
        response: OpenAIResponse
    ): AIGenerationResponse {
        const choice = response.choices?.[0]
        if (!choice) {
            throw new Error('No response generated by OpenAI')
        }

        const text = choice.message?.content || ''

        return {
            text,
            usage: {
                promptTokens: response.usage.prompt_tokens,
                completionTokens: response.usage.completion_tokens,
                totalTokens: response.usage.total_tokens,
            },
            metadata: {
                model: response.model,
                finishReason: choice.finish_reason,
                id: response.id,
            },
        }
    }

    private handleOpenAIError(error: unknown): AIProviderError {
        if (error instanceof Error) {
            // Extract structured error information
            if (
                error.message.includes('401') ||
                error.message.includes('API key')
            ) {
                return {
                    code: 'INVALID_API_KEY',
                    message: 'Invalid or missing OpenAI API key',
                    originalError: error,
                }
            }

            if (
                error.message.includes('429') ||
                error.message.includes('quota')
            ) {
                return {
                    code: 'QUOTA_EXCEEDED',
                    message: 'OpenAI API quota exceeded or rate limit hit',
                    originalError: error,
                }
            }

            if (error.message.includes('400')) {
                return {
                    code: 'INVALID_REQUEST',
                    message: 'Invalid request to OpenAI API',
                    originalError: error,
                }
            }

            return {
                code: 'OPENAI_ERROR',
                message: error.message,
                originalError: error,
            }
        }

        return {
            code: 'UNKNOWN_ERROR',
            message: 'Unknown error occurred with OpenAI provider',
            originalError: error,
        }
    }

    /**
     * Test the connection to OpenAI API
     */
    async testConnection(): Promise<boolean> {
        try {
            const response = await this.generateResponse({
                prompt: 'Hello, test connection',
                maxTokens: 10,
            })
            return !!response.text
        } catch {
            return false
        }
    }

    /**
     * Get available models for image processing
     */
    static getAvailableModels(): string[] {
        return ['gpt-4-vision-preview', 'gpt-4o', 'gpt-4o-mini', 'gpt-4-turbo']
    }
}
